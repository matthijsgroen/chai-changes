// Generated by CoffeeScript 1.3.3
(function() {
  var expect, should;

  should = chai.should();

  expect = chai.expect;

  describe('Chai-Changes', function() {
    describe('when', function() {
      it('checks conditions after callback execution', function() {
        var result;
        result = 1;
        return expect(function() {
          return result;
        }).to.change.when(function() {
          return result += 1;
        });
      });
      it('changes the object in the assert chain to the callback result', function() {
        var result;
        result = 1;
        return expect(function() {
          return result;
        }).not.to.change.when(function() {}).and.not.be.defined;
      });
      return describe('with promises', function() {
        it('checks conditions after promise resolved', function(done) {
          var def, result;
          result = 1;
          def = window.when.defer();
          expect(function() {
            return result;
          }).to.change.when((function() {
            return def.promise;
          }), {
            notify: done
          });
          result += 1;
          return def.resolve();
        });
        it('checks conditions after promise is rejected', function(done) {
          var def, result;
          result = 1;
          def = window.when.defer();
          expect(function() {
            return result;
          }).to.change.when((function() {
            return def.promise;
          }), {
            notify: done
          });
          result += 1;
          return def.reject();
        });
        return it('returns error to notify when conditions after promise fail', function(done) {
          var callCheck, def, result;
          callCheck = function(arg) {
            try {
              arg.should.eql(new Error('expected `result;` to change, but it stayed 1'));
              return done();
            } catch (error) {
              return done(new Error(error));
            }
          };
          result = 1;
          def = window.when.defer();
          expect(function() {
            return result;
          }).to.change.when((function() {
            return def.promise;
          }), {
            notify: callCheck
          });
          return def.resolve();
        });
      });
    });
    return describe('change', function() {
      describe('at all', function() {
        it('detects changes', function() {
          var result;
          result = 1;
          expect(function() {
            return expect(function() {
              return result;
            }).to.change.when(function() {
              return result = 1;
            });
          }).to["throw"]('expected `result;` to change, but it stayed 1');
          return expect(function() {
            return result;
          }).to.change.when(function() {
            return result += 1;
          });
        });
        return it('can be negated to not.change', function() {
          var result;
          result = 1;
          expect(function() {
            return expect(function() {
              return result;
            }).not.to.change.when(function() {
              return result += 2;
            });
          }).to["throw"]('expected `result;` not to change, but it changed from 1 to 3');
          return expect(function() {
            return result;
          }).to.not.change.when(function() {
            return 1 + 3;
          });
        });
      });
      describe('by delta', function() {
        it('asserts the delta of a change', function() {
          var result;
          result = 1;
          expect(function() {
            return result;
          }).to.change.by(3).when(function() {
            return result += 3;
          });
          return expect(function() {
            return result;
          }).not.to.change.by(2).when(function() {
            return result += 3;
          });
        });
        return it('reports the contents of the subject method', function() {
          var result;
          result = 1;
          return expect(function() {
            return (function() {
              1 + 3;
              return result;
            }).should.change.by(3).when(function() {
              return result += 2;
            });
          }).to["throw"]('expected `1 + 3;result;` to change by 3, but it changed by 2');
        });
      });
      describe('to', function() {
        it('asserts end values', function() {
          var result;
          result = ['a'];
          expect(function() {
            return result;
          }).to.change.to(['b']).when(function() {
            return result = ['b'];
          });
          return expect(function() {
            return result;
          }).not.to.change.to(['c']).when(function() {
            return result = ['b'];
          });
        });
        it('reports the mismatched end value', function() {
          var result;
          result = ['a'];
          return expect(function() {
            return expect(function() {
              return result;
            }).to.change.to(['b']).when(function() {
              return result = ['c'];
            });
          }).to["throw"]('expected `result;` to change to [ \'b\' ], but it changed to [ \'c\' ]');
        });
        return it('raises an error if there was no change', function() {
          var result;
          result = 'b';
          return expect(function() {
            return expect(function() {
              return result;
            }).to.change.to('b').when(function() {
              return result = 'b';
            });
          }).to["throw"]('expected `result;` to change to \'b\', but it was already \'b\'');
        });
      });
      describe('from', function() {
        it('asserts start values', function() {
          var result;
          result = ['a'];
          expect(function() {
            return result;
          }).to.change.from(['a']).when(function() {
            return result = ['b'];
          });
          return expect(function() {
            return result;
          }).to.change.not.from(['a']).when(function() {
            return result = ['c'];
          });
        });
        it('reports the mismatched start value', function() {
          var result;
          result = ['a'];
          return expect(function() {
            return expect(function() {
              return result;
            }).to.change.from(['b']).when(function() {
              return result = ['c'];
            });
          }).to["throw"]('expected the change of `result;` to start from [ \'b\' ], but it started from [ \'a\' ]');
        });
        return it('raises an error if there was no change', function() {
          var result;
          result = 'b';
          return expect(function() {
            return expect(function() {
              return result;
            }).to.change.from('b').when(function() {
              return result = 'b';
            });
          }).to["throw"]('expected `result;` to change from \'b\', but it did not change');
        });
      });
      return describe('mix and match', function() {
        return it('can use from to and by in one sentence', function() {
          var result;
          result = 3;
          return expect(function() {
            return result;
          }).to.change.from(3).to(5).by(2).when(function() {
            return result = 5;
          });
        });
      });
    });
  });

}).call(this);
